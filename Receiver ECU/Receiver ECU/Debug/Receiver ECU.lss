
Receiver ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009e  00800060  00000b3e  00000bd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008000fe  008000fe  00000c70  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002b8  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f53  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a26  00000000  00000000  00002eab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000da2  00000000  00000000  000038d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000069c  00000000  00000000  00004674  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000cc6  00000000  00000000  00004d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012b4  00000000  00000000  000059d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000230  00000000  00000000  00006c8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 97 03 	jmp	0x72e	; 0x72e <__vector_4>
  14:	0c 94 be 03 	jmp	0x77c	; 0x77c <__vector_5>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <__vector_9>
  28:	0c 94 22 03 	jmp	0x644	; 0x644 <__vector_10>
  2c:	0c 94 49 03 	jmp	0x692	; 0x692 <__vector_11>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	5e 05       	cpc	r21, r14
  56:	0d 05       	cpc	r16, r13
  58:	14 05       	cpc	r17, r4
  5a:	1b 05       	cpc	r17, r11
  5c:	22 05       	cpc	r18, r2
  5e:	29 05       	cpc	r18, r9
  60:	43 05       	cpc	r20, r3

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	ee e3       	ldi	r30, 0x3E	; 62
  76:	fb e0       	ldi	r31, 0x0B	; 11
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	ae 3f       	cpi	r26, 0xFE	; 254
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	ae ef       	ldi	r26, 0xFE	; 254
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a8 30       	cpi	r26, 0x08	; 8
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 e6 04 	call	0x9cc	; 0x9cc <main>
  98:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <Bluetooth_Init>:
 */ 

#include "../../MCAL/USART/USART.h"
#include "HC06_BLUETOOTH_MODULE.h"
void Bluetooth_Init ()
{
  a0:	ef 92       	push	r14
  a2:	ff 92       	push	r15
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	2b 97       	sbiw	r28, 0x0b	; 11
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	f8 94       	cli
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	cd bf       	out	0x3d, r28	; 61
	 
		Struct_USART bluetooth_config;
		bluetooth_config.Operation_Mode= Asynchronous_Normal_Speed;
		bluetooth_config.Duplex_Select= TX_RX_Mode;
		bluetooth_config.BuadRate= Rate_9600;
  bc:	80 e8       	ldi	r24, 0x80	; 128
  be:	08 2f       	mov	r16, r24
  c0:	8b 83       	std	Y+3, r24	; 0x03
  c2:	85 e2       	ldi	r24, 0x25	; 37
  c4:	8c 83       	std	Y+4, r24	; 0x04
  c6:	1d 82       	std	Y+5, r1	; 0x05
  c8:	1e 82       	std	Y+6, r1	; 0x06
		bluetooth_config.Parity_Mode= No_Parity;
		bluetooth_config.Stop_Bit= One_Bit;
		bluetooth_config.Clock_Polirity= TX_Rising_Edge;
	    bluetooth_config.interrupt_Select= RX_Complete_Int_Enable;
	
	USART_Init(bluetooth_config);
  ca:	ee 24       	eor	r14, r14
  cc:	e3 94       	inc	r14
  ce:	68 94       	set
  d0:	ff 24       	eor	r15, r15
  d2:	f1 f8       	bld	r15, 1
  d4:	15 e2       	ldi	r17, 0x25	; 37
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	43 e0       	ldi	r20, 0x03	; 3
  dc:	50 e0       	ldi	r21, 0x00	; 0
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	0e 94 e5 03 	call	0x7ca	; 0x7ca <USART_Init>
}
  e8:	2b 96       	adiw	r28, 0x0b	; 11
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	f8 94       	cli
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	cd bf       	out	0x3d, r28	; 61
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	1f 91       	pop	r17
  fa:	0f 91       	pop	r16
  fc:	ff 90       	pop	r15
  fe:	ef 90       	pop	r14
 100:	08 95       	ret

00000102 <Bluetooth_Read>:
	 USART_Transmit(data);
}

uint8 Bluetooth_Read()
{
	return USART_Receive();
 102:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <USART_Receive>
 106:	08 95       	ret

00000108 <LCD_vEnable>:



void LCD_vEnable (void)
{
	DIO_vWritePin(LCD_EN_PORT, LCD_EN, HIGH);
 108:	41 e0       	ldi	r20, 0x01	; 1
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	83 e3       	ldi	r24, 0x33	; 51
 10e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <DIO_vWritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	8f e0       	ldi	r24, 0x0F	; 15
 114:	97 e2       	ldi	r25, 0x27	; 39
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_vEnable+0xe>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <LCD_vEnable+0x14>
 11c:	00 00       	nop
	_delay_ms(5);
	DIO_vWritePin(LCD_EN_PORT, LCD_EN, LOW);
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	83 e3       	ldi	r24, 0x33	; 51
 124:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <DIO_vWritePin>
 128:	8f e0       	ldi	r24, 0x0F	; 15
 12a:	97 e2       	ldi	r25, 0x27	; 39
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_vEnable+0x24>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCD_vEnable+0x2a>
 132:	00 00       	nop
 134:	08 95       	ret

00000136 <LCD_Send_cmd>:


void LCD_Send_cmd (uint8 cmd)
{
	#ifdef LCD_MODE_8BIT
	DIO_vWritePort(LCD_8BIT_PORT, cmd);
 136:	68 2f       	mov	r22, r24
 138:	89 e3       	ldi	r24, 0x39	; 57
 13a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DIO_vWritePort>
	DIO_vWritePin(LCD_DB5_PORT, LCD_DB5_PIN, ( ( data_bus & (1<<5) ) >> 5 ) );
	DIO_vWritePin(LCD_DB6_PORT, LCD_DB6_PIN, ( ( data_bus & (1<<6) ) >> 6 ) );
	DIO_vWritePin(LCD_DB7_PORT, LCD_DB7_PIN, ( ( data_bus & (1<<7) ) >> 7 ) );
	#endif
	
	DIO_vWritePin(LCD_RS_PORT, LCD_RS, LOW);     // 0 to RS cause we will send command not data
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	62 e0       	ldi	r22, 0x02	; 2
 142:	83 e3       	ldi	r24, 0x33	; 51
 144:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <DIO_vWritePin>
	LCD_vEnable();
 148:	0e 94 84 00 	call	0x108	; 0x108 <LCD_vEnable>
 14c:	08 95       	ret

0000014e <LCD_vInit>:


void LCD_vInit (void)
{
	
	DIO_vSetPinDir(LCD_RS_PORT, LCD_RS, OUTPUT);
 14e:	41 e0       	ldi	r20, 0x01	; 1
 150:	62 e0       	ldi	r22, 0x02	; 2
 152:	83 e3       	ldi	r24, 0x33	; 51
 154:	0e 94 ac 02 	call	0x558	; 0x558 <DIO_vSetPinDir>
	DIO_vSetPinDir(LCD_RW_PORT, LCD_RW, OUTPUT);
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	83 e3       	ldi	r24, 0x33	; 51
 15e:	0e 94 ac 02 	call	0x558	; 0x558 <DIO_vSetPinDir>
	DIO_vWritePin(LCD_RW_PORT, LCD_RW, LOW);      // RW always be 0 cause we will write only...
 162:	40 e0       	ldi	r20, 0x00	; 0
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	83 e3       	ldi	r24, 0x33	; 51
 168:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <DIO_vWritePin>
	DIO_vSetPinDir(LCD_EN_PORT, LCD_EN, OUTPUT);
 16c:	41 e0       	ldi	r20, 0x01	; 1
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	83 e3       	ldi	r24, 0x33	; 51
 172:	0e 94 ac 02 	call	0x558	; 0x558 <DIO_vSetPinDir>
	
	#ifdef LCD_MODE_8BIT
	#ifndef LCD_MODE_4BIT
	DIO_vSetportDir(LCD_8BIT_PORT, OUTPUT);
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	89 e3       	ldi	r24, 0x39	; 57
 17a:	0e 94 cd 02 	call	0x59a	; 0x59a <DIO_vSetportDir>
	LCD_Send_cmd(0x38);
 17e:	88 e3       	ldi	r24, 0x38	; 56
 180:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_Send_cmd>
	LCD_Send_cmd(0x32);
	LCD_Send_cmd(0x28);
	#endif
	#endif
	
	LCD_Send_cmd(0x0F);
 184:	8f e0       	ldi	r24, 0x0F	; 15
 186:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_Send_cmd>
	LCD_Send_cmd(0x01);
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_Send_cmd>
 190:	8f e3       	ldi	r24, 0x3F	; 63
 192:	9c e9       	ldi	r25, 0x9C	; 156
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <LCD_vInit+0x46>
 198:	00 c0       	rjmp	.+0      	; 0x19a <LCD_vInit+0x4c>
 19a:	00 00       	nop
 19c:	08 95       	ret

0000019e <LCD_vWrite_char>:
}

void LCD_vWrite_char (uint8 data)
{
	#ifdef LCD_MODE_8BIT
	DIO_vWritePort(LCD_8BIT_PORT, data);
 19e:	68 2f       	mov	r22, r24
 1a0:	89 e3       	ldi	r24, 0x39	; 57
 1a2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DIO_vWritePort>
	DIO_vWritePin(LCD_DB5_PORT, LCD_DB5_PIN, ( ( data_bus & (1<<5) ) >> 5 ) );
	DIO_vWritePin(LCD_DB6_PORT, LCD_DB6_PIN, ( ( data_bus & (1<<6) ) >> 6 ) );
	DIO_vWritePin(LCD_DB7_PORT, LCD_DB7_PIN, ( ( data_bus & (1<<7) ) >> 7 ) );
	#endif
	
	DIO_vWritePin(LCD_RS_PORT, LCD_RS, HIGH);
 1a6:	41 e0       	ldi	r20, 0x01	; 1
 1a8:	62 e0       	ldi	r22, 0x02	; 2
 1aa:	83 e3       	ldi	r24, 0x33	; 51
 1ac:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <DIO_vWritePin>
	LCD_vEnable();
 1b0:	0e 94 84 00 	call	0x108	; 0x108 <LCD_vEnable>
 1b4:	08 95       	ret

000001b6 <LCD_vWrite_string>:
}

void LCD_vWrite_string (uint8 * data)
{
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	ec 01       	movw	r28, r24
	
	for (uint8 i = 0; data[i] != '\0'; i++ )
 1be:	88 81       	ld	r24, Y
 1c0:	88 23       	and	r24, r24
 1c2:	51 f0       	breq	.+20     	; 0x1d8 <LCD_vWrite_string+0x22>
 1c4:	10 e0       	ldi	r17, 0x00	; 0
	{
		LCD_vWrite_char(data[i]);
 1c6:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_vWrite_char>
}

void LCD_vWrite_string (uint8 * data)
{
	
	for (uint8 i = 0; data[i] != '\0'; i++ )
 1ca:	1f 5f       	subi	r17, 0xFF	; 255
 1cc:	fe 01       	movw	r30, r28
 1ce:	e1 0f       	add	r30, r17
 1d0:	f1 1d       	adc	r31, r1
 1d2:	80 81       	ld	r24, Z
 1d4:	81 11       	cpse	r24, r1
 1d6:	f7 cf       	rjmp	.-18     	; 0x1c6 <LCD_vWrite_string+0x10>
	{
		LCD_vWrite_char(data[i]);
	}
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	1f 91       	pop	r17
 1de:	08 95       	ret

000001e0 <LCD_vClear_Display>:
	LCD_Send_cmd(0x10);
}

void LCD_vClear_Display (void)
{
	LCD_Send_cmd(0x01);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_Send_cmd>
 1e6:	08 95       	ret

000001e8 <LCD_vCursor_SecondLine>:
}

void LCD_vCursor_SecondLine (void)
{
	LCD_Send_cmd(0xC0);
 1e8:	80 ec       	ldi	r24, 0xC0	; 192
 1ea:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_Send_cmd>
 1ee:	08 95       	ret

000001f0 <DIO_set_dir>:
	}
	
}
void DIO_set_dir(channel_id channel)
{
	DIO_CONFIG* channel_ptr = &DIO_CONFIG_ARR[channel];
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	fc 01       	movw	r30, r24
 1f4:	ee 0f       	add	r30, r30
 1f6:	ff 1f       	adc	r31, r31
 1f8:	ee 0f       	add	r30, r30
 1fa:	ff 1f       	adc	r31, r31
 1fc:	e8 0f       	add	r30, r24
 1fe:	f9 1f       	adc	r31, r25
 200:	e0 5a       	subi	r30, 0xA0	; 160
 202:	ff 4f       	sbci	r31, 0xFF	; 255
	
	switch (channel_ptr->port_name)
 204:	80 81       	ld	r24, Z
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	21 f1       	breq	.+72     	; 0x252 <DIO_set_dir+0x62>
 20a:	30 f0       	brcs	.+12     	; 0x218 <DIO_set_dir+0x28>
 20c:	82 30       	cpi	r24, 0x02	; 2
 20e:	f1 f1       	breq	.+124    	; 0x28c <DIO_set_dir+0x9c>
 210:	83 30       	cpi	r24, 0x03	; 3
 212:	09 f4       	brne	.+2      	; 0x216 <DIO_set_dir+0x26>
 214:	58 c0       	rjmp	.+176    	; 0x2c6 <DIO_set_dir+0xd6>
 216:	08 95       	ret
	{
		case PORT_A:
		{
			if (INPUT == channel_ptr->dir)
 218:	82 81       	ldd	r24, Z+2	; 0x02
 21a:	81 11       	cpse	r24, r1
 21c:	0d c0       	rjmp	.+26     	; 0x238 <DIO_set_dir+0x48>
			{
				CLR_BIT(DDRA,channel_ptr->pin_num);
 21e:	2a b3       	in	r18, 0x1a	; 26
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	01 80       	ldd	r0, Z+1	; 0x01
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_set_dir+0x3c>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	0a 94       	dec	r0
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_set_dir+0x38>
 230:	80 95       	com	r24
 232:	82 23       	and	r24, r18
 234:	8a bb       	out	0x1a, r24	; 26
 236:	08 95       	ret
			}
			else
			{
				SET_BIT(DDRA,channel_ptr->pin_num);
 238:	4a b3       	in	r20, 0x1a	; 26
 23a:	21 e0       	ldi	r18, 0x01	; 1
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	c9 01       	movw	r24, r18
 240:	01 80       	ldd	r0, Z+1	; 0x01
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_set_dir+0x58>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	0a 94       	dec	r0
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_set_dir+0x54>
 24c:	84 2b       	or	r24, r20
 24e:	8a bb       	out	0x1a, r24	; 26
 250:	08 95       	ret
			}
		}break;
		case PORT_B:
		{
			if (INPUT == channel_ptr->dir)
 252:	82 81       	ldd	r24, Z+2	; 0x02
 254:	81 11       	cpse	r24, r1
 256:	0d c0       	rjmp	.+26     	; 0x272 <DIO_set_dir+0x82>
			{
				CLR_BIT(DDRB,channel_ptr->pin_num);
 258:	27 b3       	in	r18, 0x17	; 23
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	01 80       	ldd	r0, Z+1	; 0x01
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_set_dir+0x76>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	0a 94       	dec	r0
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_set_dir+0x72>
 26a:	80 95       	com	r24
 26c:	82 23       	and	r24, r18
 26e:	87 bb       	out	0x17, r24	; 23
 270:	08 95       	ret
			}
			else
			{
				SET_BIT(DDRB,channel_ptr->pin_num);
 272:	47 b3       	in	r20, 0x17	; 23
 274:	21 e0       	ldi	r18, 0x01	; 1
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	c9 01       	movw	r24, r18
 27a:	01 80       	ldd	r0, Z+1	; 0x01
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_set_dir+0x92>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	0a 94       	dec	r0
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_set_dir+0x8e>
 286:	84 2b       	or	r24, r20
 288:	87 bb       	out	0x17, r24	; 23
 28a:	08 95       	ret
			}
		}break;
		case PORT_C:
		{
			if (INPUT == channel_ptr->dir)
 28c:	82 81       	ldd	r24, Z+2	; 0x02
 28e:	81 11       	cpse	r24, r1
 290:	0d c0       	rjmp	.+26     	; 0x2ac <DIO_set_dir+0xbc>
			{
				CLR_BIT(DDRC,channel_ptr->pin_num);
 292:	24 b3       	in	r18, 0x14	; 20
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	01 80       	ldd	r0, Z+1	; 0x01
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_set_dir+0xb0>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	0a 94       	dec	r0
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_set_dir+0xac>
 2a4:	80 95       	com	r24
 2a6:	82 23       	and	r24, r18
 2a8:	84 bb       	out	0x14, r24	; 20
 2aa:	08 95       	ret
			}
			else
			{
				SET_BIT(DDRC,channel_ptr->pin_num);
 2ac:	44 b3       	in	r20, 0x14	; 20
 2ae:	21 e0       	ldi	r18, 0x01	; 1
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	c9 01       	movw	r24, r18
 2b4:	01 80       	ldd	r0, Z+1	; 0x01
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_set_dir+0xcc>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	0a 94       	dec	r0
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_set_dir+0xc8>
 2c0:	84 2b       	or	r24, r20
 2c2:	84 bb       	out	0x14, r24	; 20
 2c4:	08 95       	ret
			}
		}break;
		case PORT_D:
		{
			if (INPUT == channel_ptr->dir)
 2c6:	82 81       	ldd	r24, Z+2	; 0x02
 2c8:	81 11       	cpse	r24, r1
 2ca:	0e c0       	rjmp	.+28     	; 0x2e8 <DIO_set_dir+0xf8>
			{
				CLR_BIT(DDRD,channel_ptr->pin_num);
 2cc:	41 b3       	in	r20, 0x11	; 17
 2ce:	21 e0       	ldi	r18, 0x01	; 1
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	c9 01       	movw	r24, r18
 2d4:	01 80       	ldd	r0, Z+1	; 0x01
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_set_dir+0xec>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	0a 94       	dec	r0
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_set_dir+0xe8>
 2e0:	80 95       	com	r24
 2e2:	84 23       	and	r24, r20
 2e4:	81 bb       	out	0x11, r24	; 17
 2e6:	08 95       	ret
			}
			else
			{
				SET_BIT(DDRD,channel_ptr->pin_num);
 2e8:	41 b3       	in	r20, 0x11	; 17
 2ea:	21 e0       	ldi	r18, 0x01	; 1
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	c9 01       	movw	r24, r18
 2f0:	01 80       	ldd	r0, Z+1	; 0x01
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_set_dir+0x108>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	0a 94       	dec	r0
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_set_dir+0x104>
 2fc:	84 2b       	or	r24, r20
 2fe:	81 bb       	out	0x11, r24	; 17
 300:	08 95       	ret

00000302 <DIO_Write>:
		}break;
	}
}
void DIO_Write(channel_id channel, uint8 value)
{
	DIO_CONFIG* channel_ptr = &DIO_CONFIG_ARR[channel];
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	fc 01       	movw	r30, r24
 306:	ee 0f       	add	r30, r30
 308:	ff 1f       	adc	r31, r31
 30a:	ee 0f       	add	r30, r30
 30c:	ff 1f       	adc	r31, r31
 30e:	8e 0f       	add	r24, r30
 310:	9f 1f       	adc	r25, r31
 312:	fc 01       	movw	r30, r24
 314:	e0 5a       	subi	r30, 0xA0	; 160
 316:	ff 4f       	sbci	r31, 0xFF	; 255
	switch (channel_ptr->port_name)
 318:	80 81       	ld	r24, Z
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	19 f1       	breq	.+70     	; 0x364 <DIO_Write+0x62>
 31e:	30 f0       	brcs	.+12     	; 0x32c <DIO_Write+0x2a>
 320:	82 30       	cpi	r24, 0x02	; 2
 322:	e1 f1       	breq	.+120    	; 0x39c <DIO_Write+0x9a>
 324:	83 30       	cpi	r24, 0x03	; 3
 326:	09 f4       	brne	.+2      	; 0x32a <DIO_Write+0x28>
 328:	55 c0       	rjmp	.+170    	; 0x3d4 <DIO_Write+0xd2>
 32a:	08 95       	ret
	{
		case PORT_A:
		{
			if (HIGH == value)
 32c:	61 30       	cpi	r22, 0x01	; 1
 32e:	69 f4       	brne	.+26     	; 0x34a <DIO_Write+0x48>
			{
				SET_BIT(PORTA,channel_ptr->pin_num);
 330:	4b b3       	in	r20, 0x1b	; 27
 332:	21 e0       	ldi	r18, 0x01	; 1
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	c9 01       	movw	r24, r18
 338:	01 80       	ldd	r0, Z+1	; 0x01
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_Write+0x3e>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_Write+0x3a>
 344:	84 2b       	or	r24, r20
 346:	8b bb       	out	0x1b, r24	; 27
 348:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTA,channel_ptr->pin_num);
 34a:	2b b3       	in	r18, 0x1b	; 27
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	01 80       	ldd	r0, Z+1	; 0x01
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_Write+0x56>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	0a 94       	dec	r0
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_Write+0x52>
 35c:	80 95       	com	r24
 35e:	82 23       	and	r24, r18
 360:	8b bb       	out	0x1b, r24	; 27
 362:	08 95       	ret
			}
		}break;
		case PORT_B:
		{
			if (HIGH == value)
 364:	61 30       	cpi	r22, 0x01	; 1
 366:	69 f4       	brne	.+26     	; 0x382 <DIO_Write+0x80>
			{
				SET_BIT(PORTB,channel_ptr->pin_num);
 368:	48 b3       	in	r20, 0x18	; 24
 36a:	21 e0       	ldi	r18, 0x01	; 1
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	c9 01       	movw	r24, r18
 370:	01 80       	ldd	r0, Z+1	; 0x01
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_Write+0x76>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	0a 94       	dec	r0
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_Write+0x72>
 37c:	84 2b       	or	r24, r20
 37e:	88 bb       	out	0x18, r24	; 24
 380:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB,channel_ptr->pin_num);
 382:	28 b3       	in	r18, 0x18	; 24
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	01 80       	ldd	r0, Z+1	; 0x01
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_Write+0x8e>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	0a 94       	dec	r0
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_Write+0x8a>
 394:	80 95       	com	r24
 396:	82 23       	and	r24, r18
 398:	88 bb       	out	0x18, r24	; 24
 39a:	08 95       	ret
			}
		}break;
		case PORT_C:
		{
			if (HIGH == value)
 39c:	61 30       	cpi	r22, 0x01	; 1
 39e:	69 f4       	brne	.+26     	; 0x3ba <DIO_Write+0xb8>
			{
				SET_BIT(PORTC,channel_ptr->pin_num);
 3a0:	45 b3       	in	r20, 0x15	; 21
 3a2:	21 e0       	ldi	r18, 0x01	; 1
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	c9 01       	movw	r24, r18
 3a8:	01 80       	ldd	r0, Z+1	; 0x01
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_Write+0xae>
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	0a 94       	dec	r0
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_Write+0xaa>
 3b4:	84 2b       	or	r24, r20
 3b6:	85 bb       	out	0x15, r24	; 21
 3b8:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTC,channel_ptr->pin_num);
 3ba:	25 b3       	in	r18, 0x15	; 21
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	01 80       	ldd	r0, Z+1	; 0x01
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_Write+0xc6>
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	0a 94       	dec	r0
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_Write+0xc2>
 3cc:	80 95       	com	r24
 3ce:	82 23       	and	r24, r18
 3d0:	85 bb       	out	0x15, r24	; 21
 3d2:	08 95       	ret
			}
		}break;
		case PORT_D:
		{
			if (HIGH == value)
 3d4:	61 30       	cpi	r22, 0x01	; 1
 3d6:	69 f4       	brne	.+26     	; 0x3f2 <DIO_Write+0xf0>
			{
				SET_BIT(PORTD,channel_ptr->pin_num);
 3d8:	42 b3       	in	r20, 0x12	; 18
 3da:	21 e0       	ldi	r18, 0x01	; 1
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	c9 01       	movw	r24, r18
 3e0:	01 80       	ldd	r0, Z+1	; 0x01
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_Write+0xe6>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	0a 94       	dec	r0
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_Write+0xe2>
 3ec:	84 2b       	or	r24, r20
 3ee:	82 bb       	out	0x12, r24	; 18
 3f0:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTD,channel_ptr->pin_num);
 3f2:	22 b3       	in	r18, 0x12	; 18
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	01 80       	ldd	r0, Z+1	; 0x01
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <DIO_Write+0xfe>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	0a 94       	dec	r0
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_Write+0xfa>
 404:	80 95       	com	r24
 406:	82 23       	and	r24, r18
 408:	82 bb       	out	0x12, r24	; 18
 40a:	08 95       	ret

0000040c <DIO_pullup>:
		}break;
	}
}
void DIO_pullup(channel_id channel)
{
	DIO_CONFIG* channel_ptr = &DIO_CONFIG_ARR[channel];
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	fc 01       	movw	r30, r24
 410:	ee 0f       	add	r30, r30
 412:	ff 1f       	adc	r31, r31
 414:	ee 0f       	add	r30, r30
 416:	ff 1f       	adc	r31, r31
 418:	e8 0f       	add	r30, r24
 41a:	f9 1f       	adc	r31, r25
 41c:	e0 5a       	subi	r30, 0xA0	; 160
 41e:	ff 4f       	sbci	r31, 0xFF	; 255
	switch (channel_ptr->port_name)
 420:	80 81       	ld	r24, Z
 422:	81 30       	cpi	r24, 0x01	; 1
 424:	21 f1       	breq	.+72     	; 0x46e <DIO_pullup+0x62>
 426:	30 f0       	brcs	.+12     	; 0x434 <DIO_pullup+0x28>
 428:	82 30       	cpi	r24, 0x02	; 2
 42a:	f1 f1       	breq	.+124    	; 0x4a8 <DIO_pullup+0x9c>
 42c:	83 30       	cpi	r24, 0x03	; 3
 42e:	09 f4       	brne	.+2      	; 0x432 <DIO_pullup+0x26>
 430:	58 c0       	rjmp	.+176    	; 0x4e2 <DIO_pullup+0xd6>
 432:	08 95       	ret
	{
		case PORT_A:
		{
			if (ENABLE_PULLUP == channel_ptr->pullup_state)
 434:	84 81       	ldd	r24, Z+4	; 0x04
 436:	81 30       	cpi	r24, 0x01	; 1
 438:	69 f4       	brne	.+26     	; 0x454 <DIO_pullup+0x48>
			{
				SET_BIT(PORTA,channel_ptr->pin_num);
 43a:	4b b3       	in	r20, 0x1b	; 27
 43c:	21 e0       	ldi	r18, 0x01	; 1
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	c9 01       	movw	r24, r18
 442:	01 80       	ldd	r0, Z+1	; 0x01
 444:	02 c0       	rjmp	.+4      	; 0x44a <DIO_pullup+0x3e>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	0a 94       	dec	r0
 44c:	e2 f7       	brpl	.-8      	; 0x446 <DIO_pullup+0x3a>
 44e:	84 2b       	or	r24, r20
 450:	8b bb       	out	0x1b, r24	; 27
 452:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTA,channel_ptr->pin_num);
 454:	2b b3       	in	r18, 0x1b	; 27
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	01 80       	ldd	r0, Z+1	; 0x01
 45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_pullup+0x56>
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	0a 94       	dec	r0
 464:	e2 f7       	brpl	.-8      	; 0x45e <DIO_pullup+0x52>
 466:	80 95       	com	r24
 468:	82 23       	and	r24, r18
 46a:	8b bb       	out	0x1b, r24	; 27
 46c:	08 95       	ret
			}			
		}break;
		case PORT_B:
		{
			if (ENABLE_PULLUP == channel_ptr->pullup_state)
 46e:	84 81       	ldd	r24, Z+4	; 0x04
 470:	81 30       	cpi	r24, 0x01	; 1
 472:	69 f4       	brne	.+26     	; 0x48e <DIO_pullup+0x82>
			{
				SET_BIT(PORTB,channel_ptr->pin_num);
 474:	48 b3       	in	r20, 0x18	; 24
 476:	21 e0       	ldi	r18, 0x01	; 1
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	c9 01       	movw	r24, r18
 47c:	01 80       	ldd	r0, Z+1	; 0x01
 47e:	02 c0       	rjmp	.+4      	; 0x484 <DIO_pullup+0x78>
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	0a 94       	dec	r0
 486:	e2 f7       	brpl	.-8      	; 0x480 <DIO_pullup+0x74>
 488:	84 2b       	or	r24, r20
 48a:	88 bb       	out	0x18, r24	; 24
 48c:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB,channel_ptr->pin_num);
 48e:	28 b3       	in	r18, 0x18	; 24
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	01 80       	ldd	r0, Z+1	; 0x01
 496:	02 c0       	rjmp	.+4      	; 0x49c <DIO_pullup+0x90>
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	0a 94       	dec	r0
 49e:	e2 f7       	brpl	.-8      	; 0x498 <DIO_pullup+0x8c>
 4a0:	80 95       	com	r24
 4a2:	82 23       	and	r24, r18
 4a4:	88 bb       	out	0x18, r24	; 24
 4a6:	08 95       	ret
			}
		}break;
		case PORT_C:
		{
			if (ENABLE_PULLUP == channel_ptr->pullup_state)
 4a8:	84 81       	ldd	r24, Z+4	; 0x04
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	69 f4       	brne	.+26     	; 0x4c8 <DIO_pullup+0xbc>
			{
				SET_BIT(PORTC,channel_ptr->pin_num);
 4ae:	45 b3       	in	r20, 0x15	; 21
 4b0:	21 e0       	ldi	r18, 0x01	; 1
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	c9 01       	movw	r24, r18
 4b6:	01 80       	ldd	r0, Z+1	; 0x01
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <DIO_pullup+0xb2>
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	0a 94       	dec	r0
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <DIO_pullup+0xae>
 4c2:	84 2b       	or	r24, r20
 4c4:	85 bb       	out	0x15, r24	; 21
 4c6:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTC,channel_ptr->pin_num);
 4c8:	25 b3       	in	r18, 0x15	; 21
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	01 80       	ldd	r0, Z+1	; 0x01
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIO_pullup+0xca>
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	0a 94       	dec	r0
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <DIO_pullup+0xc6>
 4da:	80 95       	com	r24
 4dc:	82 23       	and	r24, r18
 4de:	85 bb       	out	0x15, r24	; 21
 4e0:	08 95       	ret
			}
		}break;
		case PORT_D:
		{
			if (ENABLE_PULLUP == channel_ptr->pullup_state)
 4e2:	84 81       	ldd	r24, Z+4	; 0x04
 4e4:	81 30       	cpi	r24, 0x01	; 1
 4e6:	69 f4       	brne	.+26     	; 0x502 <DIO_pullup+0xf6>
			{
				SET_BIT(PORTD,channel_ptr->pin_num);
 4e8:	42 b3       	in	r20, 0x12	; 18
 4ea:	21 e0       	ldi	r18, 0x01	; 1
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	c9 01       	movw	r24, r18
 4f0:	01 80       	ldd	r0, Z+1	; 0x01
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DIO_pullup+0xec>
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	0a 94       	dec	r0
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <DIO_pullup+0xe8>
 4fc:	84 2b       	or	r24, r20
 4fe:	82 bb       	out	0x12, r24	; 18
 500:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTD,channel_ptr->pin_num);
 502:	22 b3       	in	r18, 0x12	; 18
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	01 80       	ldd	r0, Z+1	; 0x01
 50a:	02 c0       	rjmp	.+4      	; 0x510 <DIO_pullup+0x104>
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	0a 94       	dec	r0
 512:	e2 f7       	brpl	.-8      	; 0x50c <DIO_pullup+0x100>
 514:	80 95       	com	r24
 516:	82 23       	and	r24, r18
 518:	82 bb       	out	0x12, r24	; 18
 51a:	08 95       	ret

0000051c <DIO_Init>:
 *  Author: Hany Elmadany
 */ 

#include "DIO.h"
void DIO_Init(void)
{
 51c:	1f 93       	push	r17
 51e:	cf 93       	push	r28
 520:	df 93       	push	r29
 522:	c3 e6       	ldi	r28, 0x63	; 99
 524:	d0 e0       	ldi	r29, 0x00	; 0
	DIO_CONFIG* channel_ptr = NULL;
	
	for(channel_id channel = 0; channel < number_of_channels; channel++)
 526:	10 e0       	ldi	r17, 0x00	; 0
	{
		channel_ptr = &DIO_CONFIG_ARR[channel];
		DIO_set_dir(channel);
 528:	81 2f       	mov	r24, r17
 52a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_set_dir>
 52e:	fe 01       	movw	r30, r28
 530:	31 97       	sbiw	r30, 0x01	; 1
		if (OUTPUT == channel_ptr->dir)
 532:	80 81       	ld	r24, Z
 534:	81 30       	cpi	r24, 0x01	; 1
 536:	29 f4       	brne	.+10     	; 0x542 <DIO_Init+0x26>
		{
			DIO_Write(channel, channel_ptr->init_value);
 538:	68 81       	ld	r22, Y
 53a:	81 2f       	mov	r24, r17
 53c:	0e 94 81 01 	call	0x302	; 0x302 <DIO_Write>
 540:	03 c0       	rjmp	.+6      	; 0x548 <DIO_Init+0x2c>
		}
		else
		{
			DIO_pullup(channel);
 542:	81 2f       	mov	r24, r17
 544:	0e 94 06 02 	call	0x40c	; 0x40c <DIO_pullup>
#include "DIO.h"
void DIO_Init(void)
{
	DIO_CONFIG* channel_ptr = NULL;
	
	for(channel_id channel = 0; channel < number_of_channels; channel++)
 548:	1f 5f       	subi	r17, 0xFF	; 255
 54a:	25 96       	adiw	r28, 0x05	; 5
 54c:	17 30       	cpi	r17, 0x07	; 7
 54e:	61 f7       	brne	.-40     	; 0x528 <DIO_Init+0xc>
			DIO_pullup(channel);
		}
		
	}
	
}
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	1f 91       	pop	r17
 556:	08 95       	ret

00000558 <DIO_vSetPinDir>:
	}
}

void DIO_vSetPinDir (uint8 base, uint8 pin_number, uint8 state)
{
	if (state == OUTPUT)
 558:	41 30       	cpi	r20, 0x01	; 1
 55a:	79 f4       	brne	.+30     	; 0x57a <DIO_vSetPinDir+0x22>
	{
		SET_BIT( *( (volatile uint8 *)(base+1) ), pin_number );
 55c:	e8 2f       	mov	r30, r24
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	21 81       	ldd	r18, Z+1	; 0x01
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	ac 01       	movw	r20, r24
 568:	02 c0       	rjmp	.+4      	; 0x56e <DIO_vSetPinDir+0x16>
 56a:	44 0f       	add	r20, r20
 56c:	55 1f       	adc	r21, r21
 56e:	6a 95       	dec	r22
 570:	e2 f7       	brpl	.-8      	; 0x56a <DIO_vSetPinDir+0x12>
 572:	ba 01       	movw	r22, r20
 574:	62 2b       	or	r22, r18
 576:	61 83       	std	Z+1, r22	; 0x01
 578:	08 95       	ret
	}
	else
	{
		CLR_BIT( *( (volatile uint8 *)(base+1) ), pin_number );
 57a:	e8 2f       	mov	r30, r24
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	21 81       	ldd	r18, Z+1	; 0x01
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	ac 01       	movw	r20, r24
 586:	02 c0       	rjmp	.+4      	; 0x58c <DIO_vSetPinDir+0x34>
 588:	44 0f       	add	r20, r20
 58a:	55 1f       	adc	r21, r21
 58c:	6a 95       	dec	r22
 58e:	e2 f7       	brpl	.-8      	; 0x588 <DIO_vSetPinDir+0x30>
 590:	ba 01       	movw	r22, r20
 592:	60 95       	com	r22
 594:	62 23       	and	r22, r18
 596:	61 83       	std	Z+1, r22	; 0x01
 598:	08 95       	ret

0000059a <DIO_vSetportDir>:
	}
}

void DIO_vSetportDir (uint8 base, uint8 state)
{
	if (state == OUTPUT)
 59a:	61 30       	cpi	r22, 0x01	; 1
 59c:	29 f4       	brne	.+10     	; 0x5a8 <DIO_vSetportDir+0xe>
	{
		SET_REG( *( (volatile uint8 *)(base+1) ) );
 59e:	e8 2f       	mov	r30, r24
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	8f ef       	ldi	r24, 0xFF	; 255
 5a4:	81 83       	std	Z+1, r24	; 0x01
 5a6:	08 95       	ret
	}
	else
	{
		CLR_REG( *( (volatile uint8 *)(base+1) ) );
 5a8:	e8 2f       	mov	r30, r24
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	11 82       	std	Z+1, r1	; 0x01
 5ae:	08 95       	ret

000005b0 <DIO_vWritePin>:
	}
}

void DIO_vWritePin (uint8 base, uint8 pin_number, uint8 voltage)
{
	if (voltage == HIGH)
 5b0:	41 30       	cpi	r20, 0x01	; 1
 5b2:	79 f4       	brne	.+30     	; 0x5d2 <DIO_vWritePin+0x22>
	{
		SET_BIT( *( (volatile uint8 *)(base+2) ), pin_number );
 5b4:	e8 2f       	mov	r30, r24
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	22 81       	ldd	r18, Z+2	; 0x02
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	ac 01       	movw	r20, r24
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_vWritePin+0x16>
 5c2:	44 0f       	add	r20, r20
 5c4:	55 1f       	adc	r21, r21
 5c6:	6a 95       	dec	r22
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_vWritePin+0x12>
 5ca:	ba 01       	movw	r22, r20
 5cc:	62 2b       	or	r22, r18
 5ce:	62 83       	std	Z+2, r22	; 0x02
 5d0:	08 95       	ret
	}
	else
	{
		CLR_BIT( *( (volatile uint8 *)(base+2) ), pin_number );
 5d2:	e8 2f       	mov	r30, r24
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	22 81       	ldd	r18, Z+2	; 0x02
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	ac 01       	movw	r20, r24
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_vWritePin+0x34>
 5e0:	44 0f       	add	r20, r20
 5e2:	55 1f       	adc	r21, r21
 5e4:	6a 95       	dec	r22
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_vWritePin+0x30>
 5e8:	ba 01       	movw	r22, r20
 5ea:	60 95       	com	r22
 5ec:	62 23       	and	r22, r18
 5ee:	62 83       	std	Z+2, r22	; 0x02
 5f0:	08 95       	ret

000005f2 <DIO_vWritePort>:
	}
}

void DIO_vWritePort (uint8 base, uint8 voltage)
{
	*( (volatile uint8 *)(base+2) ) = voltage;
 5f2:	e8 2f       	mov	r30, r24
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	62 83       	std	Z+2, r22	; 0x02
 5f8:	08 95       	ret

000005fa <SPI_Init>:
#include "SPI.h"

void SPI_Init(SPI_MODE mode)
{
	
	switch (mode)
 5fa:	88 23       	and	r24, r24
 5fc:	61 f0       	breq	.+24     	; 0x616 <SPI_Init+0x1c>
 5fe:	81 30       	cpi	r24, 0x01	; 1
 600:	89 f4       	brne	.+34     	; 0x624 <SPI_Init+0x2a>
	{
		case MASTER:
			{
				SET_BIT(DDRB,P4);             // Slave Select 
 602:	bc 9a       	sbi	0x17, 4	; 23
				SET_BIT(DDRB,P5);            // MOSI (Master output)
 604:	bd 9a       	sbi	0x17, 5	; 23
				SET_BIT(DDRB,P7);           // SCK (Master Clock output)
 606:	bf 9a       	sbi	0x17, 7	; 23
				CLR_BIT(DDRB,P6);	       // MISO (Master input)
 608:	be 98       	cbi	0x17, 6	; 23
				SET_BIT(SPCR,MSTR);       // Master / Slave select
 60a:	6c 9a       	sbi	0x0d, 4	; 13
				SET_BIT(SPCR,SPR1);      // set prescaler to 64
 60c:	69 9a       	sbi	0x0d, 1	; 13
				SET_BIT(SPCR,SPE);     // SPI Enable
 60e:	6e 9a       	sbi	0x0d, 6	; 13
				SET_BIT(SPCR,SPIE);   // enable interrupt
 610:	6f 9a       	sbi	0x0d, 7	; 13
				SET_BIT(SPCR,DORD);
 612:	6d 9a       	sbi	0x0d, 5	; 13
				
			}
			break;
 614:	08 95       	ret
		case SLAVE:
			{
				CLR_BIT(DDRB,P4);           // Slave Select
 616:	bc 98       	cbi	0x17, 4	; 23
				CLR_BIT(DDRB,P5);          // MOSI (Slave input)
 618:	bd 98       	cbi	0x17, 5	; 23
				CLR_BIT(DDRB,P7);         // SCK (Master Clock output)
 61a:	bf 98       	cbi	0x17, 7	; 23
				SET_BIT(DDRB,P6);	     // MISO (Slave output)
 61c:	be 9a       	sbi	0x17, 6	; 23
				CLR_BIT(SPCR,MSTR);     // Master / Slave select
 61e:	6c 98       	cbi	0x0d, 4	; 13
				SET_BIT(SPCR,SPE);     // SPI Enable
 620:	6e 9a       	sbi	0x0d, 6	; 13
				SET_BIT(SPCR,SPIE);   // enable interrupt
 622:	6f 9a       	sbi	0x0d, 7	; 13
 624:	08 95       	ret

00000626 <SPI_Send_Data>:
	}
	
}

void SPI_Send_Data(uint8 data)
{
 626:	cf 93       	push	r28
 628:	c8 2f       	mov	r28, r24
	DIO_Write(CS,LOW);
 62a:	60 e0       	ldi	r22, 0x00	; 0
 62c:	84 e0       	ldi	r24, 0x04	; 4
 62e:	0e 94 81 01 	call	0x302	; 0x302 <DIO_Write>
	SPDR = data;
 632:	cf b9       	out	0x0f, r28	; 15
	while(GET_BIT(SPSR,SPIF)==0);
 634:	77 9b       	sbis	0x0e, 7	; 14
 636:	fe cf       	rjmp	.-4      	; 0x634 <SPI_Send_Data+0xe>
	DIO_Write(CS,HIGH);
 638:	61 e0       	ldi	r22, 0x01	; 1
 63a:	84 e0       	ldi	r24, 0x04	; 4
 63c:	0e 94 81 01 	call	0x302	; 0x302 <DIO_Write>
}
 640:	cf 91       	pop	r28
 642:	08 95       	ret

00000644 <__vector_10>:
{
	TCCR1A = ZER0_INITIALIZER;
}

ISR(VECT_TIMER0_COMP)
{
 644:	1f 92       	push	r1
 646:	0f 92       	push	r0
 648:	0f b6       	in	r0, 0x3f	; 63
 64a:	0f 92       	push	r0
 64c:	11 24       	eor	r1, r1
 64e:	2f 93       	push	r18
 650:	3f 93       	push	r19
 652:	4f 93       	push	r20
 654:	5f 93       	push	r21
 656:	6f 93       	push	r22
 658:	7f 93       	push	r23
 65a:	8f 93       	push	r24
 65c:	9f 93       	push	r25
 65e:	af 93       	push	r26
 660:	bf 93       	push	r27
 662:	ef 93       	push	r30
 664:	ff 93       	push	r31
	call_back_fun1();
 666:	e0 91 02 01 	lds	r30, 0x0102
 66a:	f0 91 03 01 	lds	r31, 0x0103
 66e:	09 95       	icall
}
 670:	ff 91       	pop	r31
 672:	ef 91       	pop	r30
 674:	bf 91       	pop	r27
 676:	af 91       	pop	r26
 678:	9f 91       	pop	r25
 67a:	8f 91       	pop	r24
 67c:	7f 91       	pop	r23
 67e:	6f 91       	pop	r22
 680:	5f 91       	pop	r21
 682:	4f 91       	pop	r20
 684:	3f 91       	pop	r19
 686:	2f 91       	pop	r18
 688:	0f 90       	pop	r0
 68a:	0f be       	out	0x3f, r0	; 63
 68c:	0f 90       	pop	r0
 68e:	1f 90       	pop	r1
 690:	18 95       	reti

00000692 <__vector_11>:

ISR(VECT_TIMER0_OVF){
 692:	1f 92       	push	r1
 694:	0f 92       	push	r0
 696:	0f b6       	in	r0, 0x3f	; 63
 698:	0f 92       	push	r0
 69a:	11 24       	eor	r1, r1
 69c:	2f 93       	push	r18
 69e:	3f 93       	push	r19
 6a0:	4f 93       	push	r20
 6a2:	5f 93       	push	r21
 6a4:	6f 93       	push	r22
 6a6:	7f 93       	push	r23
 6a8:	8f 93       	push	r24
 6aa:	9f 93       	push	r25
 6ac:	af 93       	push	r26
 6ae:	bf 93       	push	r27
 6b0:	ef 93       	push	r30
 6b2:	ff 93       	push	r31
	call_back_fun2();
 6b4:	e0 91 00 01 	lds	r30, 0x0100
 6b8:	f0 91 01 01 	lds	r31, 0x0101
 6bc:	09 95       	icall
}
 6be:	ff 91       	pop	r31
 6c0:	ef 91       	pop	r30
 6c2:	bf 91       	pop	r27
 6c4:	af 91       	pop	r26
 6c6:	9f 91       	pop	r25
 6c8:	8f 91       	pop	r24
 6ca:	7f 91       	pop	r23
 6cc:	6f 91       	pop	r22
 6ce:	5f 91       	pop	r21
 6d0:	4f 91       	pop	r20
 6d2:	3f 91       	pop	r19
 6d4:	2f 91       	pop	r18
 6d6:	0f 90       	pop	r0
 6d8:	0f be       	out	0x3f, r0	; 63
 6da:	0f 90       	pop	r0
 6dc:	1f 90       	pop	r1
 6de:	18 95       	reti

000006e0 <__vector_9>:
ISR(VECT_TIMER1_OVF)
{
 6e0:	1f 92       	push	r1
 6e2:	0f 92       	push	r0
 6e4:	0f b6       	in	r0, 0x3f	; 63
 6e6:	0f 92       	push	r0
 6e8:	11 24       	eor	r1, r1
 6ea:	2f 93       	push	r18
 6ec:	3f 93       	push	r19
 6ee:	4f 93       	push	r20
 6f0:	5f 93       	push	r21
 6f2:	6f 93       	push	r22
 6f4:	7f 93       	push	r23
 6f6:	8f 93       	push	r24
 6f8:	9f 93       	push	r25
 6fa:	af 93       	push	r26
 6fc:	bf 93       	push	r27
 6fe:	ef 93       	push	r30
 700:	ff 93       	push	r31
	call_back_fun5();
 702:	e0 91 fe 00 	lds	r30, 0x00FE
 706:	f0 91 ff 00 	lds	r31, 0x00FF
 70a:	09 95       	icall
}
 70c:	ff 91       	pop	r31
 70e:	ef 91       	pop	r30
 710:	bf 91       	pop	r27
 712:	af 91       	pop	r26
 714:	9f 91       	pop	r25
 716:	8f 91       	pop	r24
 718:	7f 91       	pop	r23
 71a:	6f 91       	pop	r22
 71c:	5f 91       	pop	r21
 71e:	4f 91       	pop	r20
 720:	3f 91       	pop	r19
 722:	2f 91       	pop	r18
 724:	0f 90       	pop	r0
 726:	0f be       	out	0x3f, r0	; 63
 728:	0f 90       	pop	r0
 72a:	1f 90       	pop	r1
 72c:	18 95       	reti

0000072e <__vector_4>:
ISR(VECT_TIMER2_COMP){
 72e:	1f 92       	push	r1
 730:	0f 92       	push	r0
 732:	0f b6       	in	r0, 0x3f	; 63
 734:	0f 92       	push	r0
 736:	11 24       	eor	r1, r1
 738:	2f 93       	push	r18
 73a:	3f 93       	push	r19
 73c:	4f 93       	push	r20
 73e:	5f 93       	push	r21
 740:	6f 93       	push	r22
 742:	7f 93       	push	r23
 744:	8f 93       	push	r24
 746:	9f 93       	push	r25
 748:	af 93       	push	r26
 74a:	bf 93       	push	r27
 74c:	ef 93       	push	r30
 74e:	ff 93       	push	r31
	call_back_fun3();
 750:	e0 91 04 01 	lds	r30, 0x0104
 754:	f0 91 05 01 	lds	r31, 0x0105
 758:	09 95       	icall
}
 75a:	ff 91       	pop	r31
 75c:	ef 91       	pop	r30
 75e:	bf 91       	pop	r27
 760:	af 91       	pop	r26
 762:	9f 91       	pop	r25
 764:	8f 91       	pop	r24
 766:	7f 91       	pop	r23
 768:	6f 91       	pop	r22
 76a:	5f 91       	pop	r21
 76c:	4f 91       	pop	r20
 76e:	3f 91       	pop	r19
 770:	2f 91       	pop	r18
 772:	0f 90       	pop	r0
 774:	0f be       	out	0x3f, r0	; 63
 776:	0f 90       	pop	r0
 778:	1f 90       	pop	r1
 77a:	18 95       	reti

0000077c <__vector_5>:

ISR(VECT_TIMER2_OVF){
 77c:	1f 92       	push	r1
 77e:	0f 92       	push	r0
 780:	0f b6       	in	r0, 0x3f	; 63
 782:	0f 92       	push	r0
 784:	11 24       	eor	r1, r1
 786:	2f 93       	push	r18
 788:	3f 93       	push	r19
 78a:	4f 93       	push	r20
 78c:	5f 93       	push	r21
 78e:	6f 93       	push	r22
 790:	7f 93       	push	r23
 792:	8f 93       	push	r24
 794:	9f 93       	push	r25
 796:	af 93       	push	r26
 798:	bf 93       	push	r27
 79a:	ef 93       	push	r30
 79c:	ff 93       	push	r31
	call_back_fun4();
 79e:	e0 91 06 01 	lds	r30, 0x0106
 7a2:	f0 91 07 01 	lds	r31, 0x0107
 7a6:	09 95       	icall
 7a8:	ff 91       	pop	r31
 7aa:	ef 91       	pop	r30
 7ac:	bf 91       	pop	r27
 7ae:	af 91       	pop	r26
 7b0:	9f 91       	pop	r25
 7b2:	8f 91       	pop	r24
 7b4:	7f 91       	pop	r23
 7b6:	6f 91       	pop	r22
 7b8:	5f 91       	pop	r21
 7ba:	4f 91       	pop	r20
 7bc:	3f 91       	pop	r19
 7be:	2f 91       	pop	r18
 7c0:	0f 90       	pop	r0
 7c2:	0f be       	out	0x3f, r0	; 63
 7c4:	0f 90       	pop	r0
 7c6:	1f 90       	pop	r1
 7c8:	18 95       	reti

000007ca <USART_Init>:
#include <util/delay.h>
#include "USART_Config.h"
#include "USART.h"
#include "../REG_Atmega32.h"
void USART_Init(Struct_USART USART_Config)
{ 
 7ca:	ef 92       	push	r14
 7cc:	ff 92       	push	r15
 7ce:	0f 93       	push	r16
 7d0:	1f 93       	push	r17
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
 7d6:	cd b7       	in	r28, 0x3d	; 61
 7d8:	de b7       	in	r29, 0x3e	; 62
 7da:	2b 97       	sbiw	r28, 0x0b	; 11
 7dc:	0f b6       	in	r0, 0x3f	; 63
 7de:	f8 94       	cli
 7e0:	de bf       	out	0x3e, r29	; 62
 7e2:	0f be       	out	0x3f, r0	; 63
 7e4:	cd bf       	out	0x3d, r28	; 61
 7e6:	e9 82       	std	Y+1, r14	; 0x01
 7e8:	fa 82       	std	Y+2, r15	; 0x02
 7ea:	0b 83       	std	Y+3, r16	; 0x03
 7ec:	1c 83       	std	Y+4, r17	; 0x04
 7ee:	2d 83       	std	Y+5, r18	; 0x05
 7f0:	3e 83       	std	Y+6, r19	; 0x06
 7f2:	4f 83       	std	Y+7, r20	; 0x07
 7f4:	58 87       	std	Y+8, r21	; 0x08
 7f6:	69 87       	std	Y+9, r22	; 0x09
 7f8:	7a 87       	std	Y+10, r23	; 0x0a
 7fa:	8b 87       	std	Y+11, r24	; 0x0b
	//Initialize USART registers for ATmega32
	uint16 UBRR;
	uint8 Mode;
	if (USART_Config.Operation_Mode == Asynchronous_Double_Speed)
 7fc:	82 e0       	ldi	r24, 0x02	; 2
 7fe:	e8 12       	cpse	r14, r24
 800:	02 c0       	rjmp	.+4      	; 0x806 <USART_Init+0x3c>
	{
		Mode = 8;
 802:	28 e0       	ldi	r18, 0x08	; 8
 804:	01 c0       	rjmp	.+2      	; 0x808 <USART_Init+0x3e>
	}
	else 
	{
		Mode = 16;
 806:	20 e1       	ldi	r18, 0x10	; 16
	}
	CLR_BIT(UBRRH,URSEL);
 808:	80 b5       	in	r24, 0x20	; 32
 80a:	8f 77       	andi	r24, 0x7F	; 127
 80c:	80 bd       	out	0x20, r24	; 32
	UBRR  = (F_CPU/Mode/USART_Config.BuadRate) -1;
 80e:	30 e0       	ldi	r19, 0x00	; 0
 810:	40 e0       	ldi	r20, 0x00	; 0
 812:	50 e0       	ldi	r21, 0x00	; 0
 814:	60 e4       	ldi	r22, 0x40	; 64
 816:	72 e4       	ldi	r23, 0x42	; 66
 818:	8f e0       	ldi	r24, 0x0F	; 15
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	0e 94 75 05 	call	0xaea	; 0xaea <__udivmodsi4>
 820:	ca 01       	movw	r24, r20
 822:	b9 01       	movw	r22, r18
 824:	2b 81       	ldd	r18, Y+3	; 0x03
 826:	3c 81       	ldd	r19, Y+4	; 0x04
 828:	4d 81       	ldd	r20, Y+5	; 0x05
 82a:	5e 81       	ldd	r21, Y+6	; 0x06
 82c:	0e 94 75 05 	call	0xaea	; 0xaea <__udivmodsi4>
 830:	21 50       	subi	r18, 0x01	; 1
 832:	31 09       	sbc	r19, r1
	UBRRL = (uint8)UBRR;
 834:	29 b9       	out	0x09, r18	; 9
	UBRRH = (uint8)(UBRR >> 8);
 836:	30 bd       	out	0x20, r19	; 32
	CLR_BIT(UCSRC,URSEL);
 838:	80 b5       	in	r24, 0x20	; 32
 83a:	8f 77       	andi	r24, 0x7F	; 127
 83c:	80 bd       	out	0x20, r24	; 32
	
	switch(USART_Config.Operation_Mode)
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	e8 16       	cp	r14, r24
 842:	59 f0       	breq	.+22     	; 0x85a <USART_Init+0x90>
 844:	e8 16       	cp	r14, r24
 846:	20 f0       	brcs	.+8      	; 0x850 <USART_Init+0x86>
 848:	82 e0       	ldi	r24, 0x02	; 2
 84a:	e8 16       	cp	r14, r24
 84c:	59 f0       	breq	.+22     	; 0x864 <__stack+0x5>
 84e:	0e c0       	rjmp	.+28     	; 0x86c <__stack+0xd>
	{
		case Synchronous:
		{
			SET_BIT(UCSRC,UMSEL);
 850:	80 b5       	in	r24, 0x20	; 32
 852:	80 64       	ori	r24, 0x40	; 64
 854:	80 bd       	out	0x20, r24	; 32
			CLR_BIT(UCSRA,U2X);
 856:	59 98       	cbi	0x0b, 1	; 11
		}break;
 858:	09 c0       	rjmp	.+18     	; 0x86c <__stack+0xd>
		
		case Asynchronous_Normal_Speed:
		{
			CLR_BIT(UCSRC,UMSEL);
 85a:	80 b5       	in	r24, 0x20	; 32
 85c:	8f 7b       	andi	r24, 0xBF	; 191
 85e:	80 bd       	out	0x20, r24	; 32
			CLR_BIT(UCSRA,U2X);
 860:	59 98       	cbi	0x0b, 1	; 11
		}break;
 862:	04 c0       	rjmp	.+8      	; 0x86c <__stack+0xd>
		case Asynchronous_Double_Speed:
		{
			CLR_BIT(UCSRC,UMSEL);
 864:	80 b5       	in	r24, 0x20	; 32
 866:	8f 7b       	andi	r24, 0xBF	; 191
 868:	80 bd       	out	0x20, r24	; 32
			SET_BIT(UCSRA,U2X);
 86a:	59 9a       	sbi	0x0b, 1	; 11
		}break;
	}
	
	switch(USART_Config.Duplex_Select)
 86c:	8a 81       	ldd	r24, Y+2	; 0x02
 86e:	81 30       	cpi	r24, 0x01	; 1
 870:	31 f0       	breq	.+12     	; 0x87e <__stack+0x1f>
 872:	18 f0       	brcs	.+6      	; 0x87a <__stack+0x1b>
 874:	82 30       	cpi	r24, 0x02	; 2
 876:	29 f0       	breq	.+10     	; 0x882 <__stack+0x23>
 878:	07 c0       	rjmp	.+14     	; 0x888 <__stack+0x29>
	{
		case TX_Mode:
		{
			SET_BIT(UCSRB,TXEN);
 87a:	53 9a       	sbi	0x0a, 3	; 10
		}break;
 87c:	06 c0       	rjmp	.+12     	; 0x88a <__stack+0x2b>
		case RX_Mode:
		{
			SET_BIT(UCSRB,RXEN);
 87e:	54 9a       	sbi	0x0a, 4	; 10
		}break;
 880:	04 c0       	rjmp	.+8      	; 0x88a <__stack+0x2b>
		case TX_RX_Mode:
		{
			SET_BIT(UCSRB,TXEN);
 882:	53 9a       	sbi	0x0a, 3	; 10
			SET_BIT(UCSRB,RXEN);
 884:	54 9a       	sbi	0x0a, 4	; 10
		}break;
 886:	01 c0       	rjmp	.+2      	; 0x88a <__stack+0x2b>
		default:
		{
			SET_BIT(UCSRB,TXEN);
 888:	53 9a       	sbi	0x0a, 3	; 10
		}break; 
	}
	
	switch(USART_Config.Character_Size)
 88a:	8f 81       	ldd	r24, Y+7	; 0x07
 88c:	82 30       	cpi	r24, 0x02	; 2
 88e:	d9 f0       	breq	.+54     	; 0x8c6 <__stack+0x67>
 890:	28 f4       	brcc	.+10     	; 0x89c <__stack+0x3d>
 892:	88 23       	and	r24, r24
 894:	41 f0       	breq	.+16     	; 0x8a6 <__stack+0x47>
 896:	81 30       	cpi	r24, 0x01	; 1
 898:	71 f0       	breq	.+28     	; 0x8b6 <__stack+0x57>
 89a:	2d c0       	rjmp	.+90     	; 0x8f6 <__stack+0x97>
 89c:	83 30       	cpi	r24, 0x03	; 3
 89e:	d9 f0       	breq	.+54     	; 0x8d6 <__stack+0x77>
 8a0:	84 30       	cpi	r24, 0x04	; 4
 8a2:	09 f1       	breq	.+66     	; 0x8e6 <__stack+0x87>
 8a4:	28 c0       	rjmp	.+80     	; 0x8f6 <__stack+0x97>
	{
		case Char_5_Bits:
		{
			CLR_BIT(UCSRB,UCSZ2);
 8a6:	52 98       	cbi	0x0a, 2	; 10
			CLR_BIT(UCSRC,UCSZ1);
 8a8:	80 b5       	in	r24, 0x20	; 32
 8aa:	8b 7f       	andi	r24, 0xFB	; 251
 8ac:	80 bd       	out	0x20, r24	; 32
			CLR_BIT(UCSRC,UCSZ0);
 8ae:	80 b5       	in	r24, 0x20	; 32
 8b0:	8d 7f       	andi	r24, 0xFD	; 253
 8b2:	80 bd       	out	0x20, r24	; 32
		}break;
 8b4:	27 c0       	rjmp	.+78     	; 0x904 <__stack+0xa5>
		case Char_6_Bits:
		{
			CLR_BIT(UCSRB,UCSZ2);
 8b6:	52 98       	cbi	0x0a, 2	; 10
			CLR_BIT(UCSRC,UCSZ1);
 8b8:	80 b5       	in	r24, 0x20	; 32
 8ba:	8b 7f       	andi	r24, 0xFB	; 251
 8bc:	80 bd       	out	0x20, r24	; 32
			SET_BIT(UCSRC,UCSZ0);			
 8be:	80 b5       	in	r24, 0x20	; 32
 8c0:	82 60       	ori	r24, 0x02	; 2
 8c2:	80 bd       	out	0x20, r24	; 32
		}break;
 8c4:	1f c0       	rjmp	.+62     	; 0x904 <__stack+0xa5>
		case Char_7_Bits:
		{
			CLR_BIT(UCSRB,UCSZ2);
 8c6:	52 98       	cbi	0x0a, 2	; 10
			SET_BIT(UCSRC,UCSZ1);
 8c8:	80 b5       	in	r24, 0x20	; 32
 8ca:	84 60       	ori	r24, 0x04	; 4
 8cc:	80 bd       	out	0x20, r24	; 32
			CLR_BIT(UCSRC,UCSZ0);			
 8ce:	80 b5       	in	r24, 0x20	; 32
 8d0:	8d 7f       	andi	r24, 0xFD	; 253
 8d2:	80 bd       	out	0x20, r24	; 32
		}break;
 8d4:	17 c0       	rjmp	.+46     	; 0x904 <__stack+0xa5>
		case Char_8_Bits:
		{
			CLR_BIT(UCSRB,UCSZ2);
 8d6:	52 98       	cbi	0x0a, 2	; 10
			SET_BIT(UCSRC,UCSZ1);
 8d8:	80 b5       	in	r24, 0x20	; 32
 8da:	84 60       	ori	r24, 0x04	; 4
 8dc:	80 bd       	out	0x20, r24	; 32
			SET_BIT(UCSRC,UCSZ0);
 8de:	80 b5       	in	r24, 0x20	; 32
 8e0:	82 60       	ori	r24, 0x02	; 2
 8e2:	80 bd       	out	0x20, r24	; 32
		}break;
 8e4:	0f c0       	rjmp	.+30     	; 0x904 <__stack+0xa5>
		case Char_9_Bits:
		{
			SET_BIT(UCSRB,UCSZ2);
 8e6:	52 9a       	sbi	0x0a, 2	; 10
			SET_BIT(UCSRC,UCSZ1);
 8e8:	80 b5       	in	r24, 0x20	; 32
 8ea:	84 60       	ori	r24, 0x04	; 4
 8ec:	80 bd       	out	0x20, r24	; 32
			SET_BIT(UCSRC,UCSZ0);
 8ee:	80 b5       	in	r24, 0x20	; 32
 8f0:	82 60       	ori	r24, 0x02	; 2
 8f2:	80 bd       	out	0x20, r24	; 32
		}break;
 8f4:	07 c0       	rjmp	.+14     	; 0x904 <__stack+0xa5>
		default:
		{
			CLR_BIT(UCSRB,UCSZ2);
 8f6:	52 98       	cbi	0x0a, 2	; 10
			SET_BIT(UCSRC,UCSZ1);
 8f8:	80 b5       	in	r24, 0x20	; 32
 8fa:	84 60       	ori	r24, 0x04	; 4
 8fc:	80 bd       	out	0x20, r24	; 32
			SET_BIT(UCSRC,UCSZ0);
 8fe:	80 b5       	in	r24, 0x20	; 32
 900:	82 60       	ori	r24, 0x02	; 2
 902:	80 bd       	out	0x20, r24	; 32
		}break;
	}
	
	switch(USART_Config.Parity_Mode)
 904:	88 85       	ldd	r24, Y+8	; 0x08
 906:	81 30       	cpi	r24, 0x01	; 1
 908:	59 f0       	breq	.+22     	; 0x920 <__stack+0xc1>
 90a:	18 f0       	brcs	.+6      	; 0x912 <__stack+0xb3>
 90c:	82 30       	cpi	r24, 0x02	; 2
 90e:	79 f0       	breq	.+30     	; 0x92e <__stack+0xcf>
 910:	15 c0       	rjmp	.+42     	; 0x93c <__stack+0xdd>
	{
		case No_Parity:
		{
			CLR_BIT(UCSRC,UPM1);
 912:	80 b5       	in	r24, 0x20	; 32
 914:	8f 7d       	andi	r24, 0xDF	; 223
 916:	80 bd       	out	0x20, r24	; 32
			CLR_BIT(UCSRC,UPM0);
 918:	80 b5       	in	r24, 0x20	; 32
 91a:	8f 7e       	andi	r24, 0xEF	; 239
 91c:	80 bd       	out	0x20, r24	; 32
		}break;
 91e:	14 c0       	rjmp	.+40     	; 0x948 <__stack+0xe9>
		case Even_Parity:
		{
			SET_BIT(UCSRC,UPM1);
 920:	80 b5       	in	r24, 0x20	; 32
 922:	80 62       	ori	r24, 0x20	; 32
 924:	80 bd       	out	0x20, r24	; 32
			CLR_BIT(UCSRC,UPM0);
 926:	80 b5       	in	r24, 0x20	; 32
 928:	8f 7e       	andi	r24, 0xEF	; 239
 92a:	80 bd       	out	0x20, r24	; 32
		}break;
 92c:	0d c0       	rjmp	.+26     	; 0x948 <__stack+0xe9>
		case Odd_Parity:
		{
			SET_BIT(UCSRC,UPM1);
 92e:	80 b5       	in	r24, 0x20	; 32
 930:	80 62       	ori	r24, 0x20	; 32
 932:	80 bd       	out	0x20, r24	; 32
			SET_BIT(UCSRC,UPM0);
 934:	80 b5       	in	r24, 0x20	; 32
 936:	80 61       	ori	r24, 0x10	; 16
 938:	80 bd       	out	0x20, r24	; 32
		}break;
 93a:	06 c0       	rjmp	.+12     	; 0x948 <__stack+0xe9>
		default:
		{
			CLR_BIT(UCSRC,UPM1);
 93c:	80 b5       	in	r24, 0x20	; 32
 93e:	8f 7d       	andi	r24, 0xDF	; 223
 940:	80 bd       	out	0x20, r24	; 32
			CLR_BIT(UCSRC,UPM0);
 942:	80 b5       	in	r24, 0x20	; 32
 944:	8f 7e       	andi	r24, 0xEF	; 239
 946:	80 bd       	out	0x20, r24	; 32
		}break;
	}
	
	switch(USART_Config.Stop_Bit){
 948:	89 85       	ldd	r24, Y+9	; 0x09
 94a:	88 23       	and	r24, r24
 94c:	19 f0       	breq	.+6      	; 0x954 <__stack+0xf5>
 94e:	81 30       	cpi	r24, 0x01	; 1
 950:	29 f0       	breq	.+10     	; 0x95c <__stack+0xfd>
 952:	08 c0       	rjmp	.+16     	; 0x964 <__stack+0x105>
		case One_Bit:
		{
			CLR_BIT(UCSRC,USBS);
 954:	80 b5       	in	r24, 0x20	; 32
 956:	87 7f       	andi	r24, 0xF7	; 247
 958:	80 bd       	out	0x20, r24	; 32
		}break;
 95a:	07 c0       	rjmp	.+14     	; 0x96a <__stack+0x10b>
		case Two_Bits:
		{
			SET_BIT(UCSRC,USBS);
 95c:	80 b5       	in	r24, 0x20	; 32
 95e:	88 60       	ori	r24, 0x08	; 8
 960:	80 bd       	out	0x20, r24	; 32
		}break;
 962:	03 c0       	rjmp	.+6      	; 0x96a <__stack+0x10b>
		default:
		{
			CLR_BIT(UCSRC,USBS);
 964:	80 b5       	in	r24, 0x20	; 32
 966:	87 7f       	andi	r24, 0xF7	; 247
 968:	80 bd       	out	0x20, r24	; 32
		}break;
	}

	switch(USART_Config.Clock_Polirity){
 96a:	8a 85       	ldd	r24, Y+10	; 0x0a
 96c:	88 23       	and	r24, r24
 96e:	31 f0       	breq	.+12     	; 0x97c <__stack+0x11d>
 970:	81 30       	cpi	r24, 0x01	; 1
 972:	41 f4       	brne	.+16     	; 0x984 <__stack+0x125>
		case TX_Falling_Edge:
		{
			SET_BIT(UCSRC,UCPOL);
 974:	80 b5       	in	r24, 0x20	; 32
 976:	81 60       	ori	r24, 0x01	; 1
 978:	80 bd       	out	0x20, r24	; 32
		}break;
 97a:	07 c0       	rjmp	.+14     	; 0x98a <__stack+0x12b>
		case TX_Rising_Edge:
		{
			CLR_BIT(UCSRC,UCPOL);
 97c:	80 b5       	in	r24, 0x20	; 32
 97e:	8e 7f       	andi	r24, 0xFE	; 254
 980:	80 bd       	out	0x20, r24	; 32
		}break;
 982:	03 c0       	rjmp	.+6      	; 0x98a <__stack+0x12b>
		default:
		{
			CLR_BIT(UCSRC,UCPOL);
 984:	80 b5       	in	r24, 0x20	; 32
 986:	8e 7f       	andi	r24, 0xFE	; 254
 988:	80 bd       	out	0x20, r24	; 32
		}break;
	}
	
	switch(USART_Config.interrupt_Select)
 98a:	8b 85       	ldd	r24, Y+11	; 0x0b
 98c:	81 30       	cpi	r24, 0x01	; 1
 98e:	31 f0       	breq	.+12     	; 0x99c <__stack+0x13d>
 990:	18 f0       	brcs	.+6      	; 0x998 <__stack+0x139>
 992:	82 30       	cpi	r24, 0x02	; 2
 994:	29 f0       	breq	.+10     	; 0x9a0 <__stack+0x141>
 996:	06 c0       	rjmp	.+12     	; 0x9a4 <__stack+0x145>
	{
		case RX_Complete_Int_Enable:
		{
			SET_BIT(UCSRB,RXCIE);
 998:	57 9a       	sbi	0x0a, 7	; 10
		}break;
 99a:	07 c0       	rjmp	.+14     	; 0x9aa <__stack+0x14b>
		case TX_Complete_Int_Enable:
		{
			SET_BIT(UCSRB,TXCIE);
 99c:	56 9a       	sbi	0x0a, 6	; 10
		}break;
 99e:	05 c0       	rjmp	.+10     	; 0x9aa <__stack+0x14b>
		case Data_Reg_Empty_Int_Enable:
		{
			SET_BIT(UCSRB,UDRIE);
 9a0:	55 9a       	sbi	0x0a, 5	; 10
		}break;
 9a2:	03 c0       	rjmp	.+6      	; 0x9aa <__stack+0x14b>
		default:
		{
			CLR_BIT(UCSRB,RXCIE);
 9a4:	57 98       	cbi	0x0a, 7	; 10
			SET_BIT(UCSRB,TXCIE);
 9a6:	56 9a       	sbi	0x0a, 6	; 10
			SET_BIT(UCSRB,UDRIE);
 9a8:	55 9a       	sbi	0x0a, 5	; 10
		}break;
	}
}
 9aa:	2b 96       	adiw	r28, 0x0b	; 11
 9ac:	0f b6       	in	r0, 0x3f	; 63
 9ae:	f8 94       	cli
 9b0:	de bf       	out	0x3e, r29	; 62
 9b2:	0f be       	out	0x3f, r0	; 63
 9b4:	cd bf       	out	0x3d, r28	; 61
 9b6:	df 91       	pop	r29
 9b8:	cf 91       	pop	r28
 9ba:	1f 91       	pop	r17
 9bc:	0f 91       	pop	r16
 9be:	ff 90       	pop	r15
 9c0:	ef 90       	pop	r14
 9c2:	08 95       	ret

000009c4 <USART_Receive>:
}


uint8 USART_Receive( void )
{//Function receive the data of the UDR register
	while (!(GET_BIT(UCSRA,RXC)));		//	Wait for the data to be received
 9c4:	5f 9b       	sbis	0x0b, 7	; 11
 9c6:	fe cf       	rjmp	.-4      	; 0x9c4 <USART_Receive>
	return UDR;
 9c8:	8c b1       	in	r24, 0x0c	; 12
}
 9ca:	08 95       	ret

000009cc <main>:
#define MOTOR_ON 1
#define MOTOR_OFF 0
#define USART_READ_DELAY_MS 10
int main(void)
{
	LCD_vInit();
 9cc:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_vInit>
	DIO_Init();
 9d0:	0e 94 8e 02 	call	0x51c	; 0x51c <DIO_Init>
	Bluetooth_Init ();
 9d4:	0e 94 50 00 	call	0xa0	; 0xa0 <Bluetooth_Init>
	SPI_Init(MASTER);
 9d8:	81 e0       	ldi	r24, 0x01	; 1
 9da:	0e 94 fd 02 	call	0x5fa	; 0x5fa <SPI_Init>
	uint8 bluetooth_signal;
	uint8 motor_for_flag = MOTOR_OFF;
	uint8 motor_back_flag = MOTOR_OFF;
 9de:	10 e0       	ldi	r17, 0x00	; 0
	LCD_vInit();
	DIO_Init();
	Bluetooth_Init ();
	SPI_Init(MASTER);
	uint8 bluetooth_signal;
	uint8 motor_for_flag = MOTOR_OFF;
 9e0:	d0 e0       	ldi	r29, 0x00	; 0
					{
						LCD_vClear_Display();
						LCD_vWrite_string("Window Closed");
					}
						motor_for_flag = MOTOR_OFF;
						motor_back_flag = MOTOR_OFF;
 9e2:	00 e0       	ldi	r16, 0x00	; 0
				{
					if (motor_for_flag == MOTOR_OFF)
					{
						LCD_vClear_Display();
						LCD_vWrite_string("Window Closing");
					motor_back_flag = MOTOR_ON;
 9e4:	ff 24       	eor	r15, r15
 9e6:	f3 94       	inc	r15
 9e8:	02 c0       	rjmp	.+4      	; 0x9ee <main+0x22>
					{
						LCD_vClear_Display();
						LCD_vWrite_string("Window Closed");
					}
						motor_for_flag = MOTOR_OFF;
						motor_back_flag = MOTOR_OFF;
 9ea:	10 2f       	mov	r17, r16
					else if (motor_back_flag == MOTOR_ON)
					{
						LCD_vClear_Display();
						LCD_vWrite_string("Window Closed");
					}
						motor_for_flag = MOTOR_OFF;
 9ec:	d0 2f       	mov	r29, r16
	uint8 motor_for_flag = MOTOR_OFF;
	uint8 motor_back_flag = MOTOR_OFF;
	
	while(1)
	{
		bluetooth_signal = Bluetooth_Read();
 9ee:	0e 94 81 00 	call	0x102	; 0x102 <Bluetooth_Read>
 9f2:	c8 2f       	mov	r28, r24
 9f4:	8f e3       	ldi	r24, 0x3F	; 63
 9f6:	9c e9       	ldi	r25, 0x9C	; 156
 9f8:	01 97       	sbiw	r24, 0x01	; 1
 9fa:	f1 f7       	brne	.-4      	; 0x9f8 <main+0x2c>
 9fc:	00 c0       	rjmp	.+0      	; 0x9fe <main+0x32>
 9fe:	00 00       	nop
		_delay_ms(USART_READ_DELAY_MS);
		SPI_Send_Data(bluetooth_signal);
 a00:	8c 2f       	mov	r24, r28
 a02:	0e 94 13 03 	call	0x626	; 0x626 <SPI_Send_Data>
		
		switch (bluetooth_signal)
 a06:	8c 2f       	mov	r24, r28
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	87 30       	cpi	r24, 0x07	; 7
 a0c:	91 05       	cpc	r25, r1
 a0e:	78 f7       	brcc	.-34     	; 0x9ee <main+0x22>
 a10:	fc 01       	movw	r30, r24
 a12:	e6 5d       	subi	r30, 0xD6	; 214
 a14:	ff 4f       	sbci	r31, 0xFF	; 255
 a16:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__tablejump2__>
		{
			case LED1_ON:
				{
					LCD_vClear_Display();
 a1a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_vClear_Display>
					LCD_vWrite_string("LED 1 ON");
 a1e:	83 e8       	ldi	r24, 0x83	; 131
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_vWrite_string>
				}break;
 a26:	e3 cf       	rjmp	.-58     	; 0x9ee <main+0x22>
			case LED1_OFF:
				{
					LCD_vClear_Display();
 a28:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_vClear_Display>
					LCD_vWrite_string("LED 1 OFF");
 a2c:	8c e8       	ldi	r24, 0x8C	; 140
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_vWrite_string>
				}break;
 a34:	dc cf       	rjmp	.-72     	; 0x9ee <main+0x22>
			case LED2_ON:
				{
					LCD_vClear_Display();
 a36:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_vClear_Display>
					LCD_vWrite_string("LED 2 ON");
 a3a:	86 e9       	ldi	r24, 0x96	; 150
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_vWrite_string>
				}break;
 a42:	d5 cf       	rjmp	.-86     	; 0x9ee <main+0x22>
			case LED2_OFF:
				{
					LCD_vClear_Display();
 a44:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_vClear_Display>
					LCD_vWrite_string("LED 2 OFF");
 a48:	8f e9       	ldi	r24, 0x9F	; 159
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_vWrite_string>
				}break;
 a50:	ce cf       	rjmp	.-100    	; 0x9ee <main+0x22>
			case WINDOW_OPEN:
				{
					if (motor_back_flag == MOTOR_OFF)
 a52:	11 11       	cpse	r17, r1
 a54:	08 c0       	rjmp	.+16     	; 0xa66 <main+0x9a>
					{
						LCD_vClear_Display();
 a56:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_vClear_Display>
						LCD_vWrite_string("Window Opening");
 a5a:	89 ea       	ldi	r24, 0xA9	; 169
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_vWrite_string>
						motor_for_flag = MOTOR_ON;
 a62:	df 2d       	mov	r29, r15
 a64:	c4 cf       	rjmp	.-120    	; 0x9ee <main+0x22>
					}
					else if (motor_back_flag == MOTOR_ON)
 a66:	11 30       	cpi	r17, 0x01	; 1
 a68:	11 f6       	brne	.-124    	; 0x9ee <main+0x22>
					{
						LCD_vClear_Display();
 a6a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_vClear_Display>
						LCD_vWrite_string("Motor Stopped");
 a6e:	88 eb       	ldi	r24, 0xB8	; 184
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_vWrite_string>
						LCD_vCursor_SecondLine();
 a76:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_vCursor_SecondLine>
						LCD_vWrite_string("Press again");
 a7a:	86 ec       	ldi	r24, 0xC6	; 198
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_vWrite_string>
						motor_back_flag = MOTOR_OFF;
 a82:	10 2f       	mov	r17, r16
 a84:	b4 cf       	rjmp	.-152    	; 0x9ee <main+0x22>
					}
				}break;
			case WINDOW_CLOSE:
				{
					if (motor_for_flag == MOTOR_OFF)
 a86:	d1 11       	cpse	r29, r1
 a88:	08 c0       	rjmp	.+16     	; 0xa9a <main+0xce>
					{
						LCD_vClear_Display();
 a8a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_vClear_Display>
						LCD_vWrite_string("Window Closing");
 a8e:	82 ed       	ldi	r24, 0xD2	; 210
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_vWrite_string>
					motor_back_flag = MOTOR_ON;
 a96:	1f 2d       	mov	r17, r15
 a98:	aa cf       	rjmp	.-172    	; 0x9ee <main+0x22>
					}
					else if (motor_for_flag == MOTOR_ON)
 a9a:	d1 30       	cpi	r29, 0x01	; 1
 a9c:	09 f0       	breq	.+2      	; 0xaa0 <main+0xd4>
 a9e:	a7 cf       	rjmp	.-178    	; 0x9ee <main+0x22>
					{
						LCD_vClear_Display();
 aa0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_vClear_Display>
						LCD_vWrite_string("Motor Stopped");
 aa4:	88 eb       	ldi	r24, 0xB8	; 184
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_vWrite_string>
						LCD_vCursor_SecondLine();
 aac:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_vCursor_SecondLine>
						LCD_vWrite_string("Press again");
 ab0:	86 ec       	ldi	r24, 0xC6	; 198
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_vWrite_string>
						motor_for_flag = MOTOR_OFF;
 ab8:	d0 2f       	mov	r29, r16
 aba:	99 cf       	rjmp	.-206    	; 0x9ee <main+0x22>
					}
				}break;
			case WINDOW_OFF:
				{
					if (motor_for_flag == MOTOR_ON)
 abc:	d1 30       	cpi	r29, 0x01	; 1
 abe:	49 f4       	brne	.+18     	; 0xad2 <main+0x106>
					{
						LCD_vClear_Display();
 ac0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_vClear_Display>
						LCD_vWrite_string("Window Opened");
 ac4:	81 ee       	ldi	r24, 0xE1	; 225
 ac6:	90 e0       	ldi	r25, 0x00	; 0
 ac8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_vWrite_string>
					{
						LCD_vClear_Display();
						LCD_vWrite_string("Window Closed");
					}
						motor_for_flag = MOTOR_OFF;
						motor_back_flag = MOTOR_OFF;
 acc:	10 2f       	mov	r17, r16
					else if (motor_back_flag == MOTOR_ON)
					{
						LCD_vClear_Display();
						LCD_vWrite_string("Window Closed");
					}
						motor_for_flag = MOTOR_OFF;
 ace:	d0 2f       	mov	r29, r16
 ad0:	8e cf       	rjmp	.-228    	; 0x9ee <main+0x22>
					if (motor_for_flag == MOTOR_ON)
					{
						LCD_vClear_Display();
						LCD_vWrite_string("Window Opened");
					}
					else if (motor_back_flag == MOTOR_ON)
 ad2:	11 30       	cpi	r17, 0x01	; 1
 ad4:	09 f0       	breq	.+2      	; 0xad8 <main+0x10c>
 ad6:	89 cf       	rjmp	.-238    	; 0x9ea <main+0x1e>
					{
						LCD_vClear_Display();
 ad8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_vClear_Display>
						LCD_vWrite_string("Window Closed");
 adc:	8f ee       	ldi	r24, 0xEF	; 239
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_vWrite_string>
					}
						motor_for_flag = MOTOR_OFF;
						motor_back_flag = MOTOR_OFF;
 ae4:	10 2f       	mov	r17, r16
					else if (motor_back_flag == MOTOR_ON)
					{
						LCD_vClear_Display();
						LCD_vWrite_string("Window Closed");
					}
						motor_for_flag = MOTOR_OFF;
 ae6:	d0 2f       	mov	r29, r16
 ae8:	82 cf       	rjmp	.-252    	; 0x9ee <main+0x22>

00000aea <__udivmodsi4>:
 aea:	a1 e2       	ldi	r26, 0x21	; 33
 aec:	1a 2e       	mov	r1, r26
 aee:	aa 1b       	sub	r26, r26
 af0:	bb 1b       	sub	r27, r27
 af2:	fd 01       	movw	r30, r26
 af4:	0d c0       	rjmp	.+26     	; 0xb10 <__udivmodsi4_ep>

00000af6 <__udivmodsi4_loop>:
 af6:	aa 1f       	adc	r26, r26
 af8:	bb 1f       	adc	r27, r27
 afa:	ee 1f       	adc	r30, r30
 afc:	ff 1f       	adc	r31, r31
 afe:	a2 17       	cp	r26, r18
 b00:	b3 07       	cpc	r27, r19
 b02:	e4 07       	cpc	r30, r20
 b04:	f5 07       	cpc	r31, r21
 b06:	20 f0       	brcs	.+8      	; 0xb10 <__udivmodsi4_ep>
 b08:	a2 1b       	sub	r26, r18
 b0a:	b3 0b       	sbc	r27, r19
 b0c:	e4 0b       	sbc	r30, r20
 b0e:	f5 0b       	sbc	r31, r21

00000b10 <__udivmodsi4_ep>:
 b10:	66 1f       	adc	r22, r22
 b12:	77 1f       	adc	r23, r23
 b14:	88 1f       	adc	r24, r24
 b16:	99 1f       	adc	r25, r25
 b18:	1a 94       	dec	r1
 b1a:	69 f7       	brne	.-38     	; 0xaf6 <__udivmodsi4_loop>
 b1c:	60 95       	com	r22
 b1e:	70 95       	com	r23
 b20:	80 95       	com	r24
 b22:	90 95       	com	r25
 b24:	9b 01       	movw	r18, r22
 b26:	ac 01       	movw	r20, r24
 b28:	bd 01       	movw	r22, r26
 b2a:	cf 01       	movw	r24, r30
 b2c:	08 95       	ret

00000b2e <__tablejump2__>:
 b2e:	ee 0f       	add	r30, r30
 b30:	ff 1f       	adc	r31, r31

00000b32 <__tablejump__>:
 b32:	05 90       	lpm	r0, Z+
 b34:	f4 91       	lpm	r31, Z
 b36:	e0 2d       	mov	r30, r0
 b38:	09 94       	ijmp

00000b3a <_exit>:
 b3a:	f8 94       	cli

00000b3c <__stop_program>:
 b3c:	ff cf       	rjmp	.-2      	; 0xb3c <__stop_program>
